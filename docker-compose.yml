version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: psa_pregrader
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup_database.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - psa_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-changeme}@postgres:5432/psa_pregrader
      CARD_IMAGES_DIR: /app/data/card_images
      PYTHONUNBUFFERED: 1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - psa_network
    restart: unless-stopped

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-changeme}@postgres:5432/psa_pregrader
      PSA_API_TOKEN: ${PSA_API_TOKEN}
      PORT: 3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - psa_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://backend:3001
      REACT_APP_STREAMLIT_URL: http://app:8501
    depends_on:
      - backend
      - app
    networks:
      - psa_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  psa_network:
    driver: bridge